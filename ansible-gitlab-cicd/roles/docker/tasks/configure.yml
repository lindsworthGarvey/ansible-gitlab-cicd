---
# file: roles/docker/tasks/configure.yml
# Install and configure docker nodes

# - name: Check if CentOS 7
#   fail: msg="Not a CentOS 7 server"
#   when: ansible_distribution_version < "7"
#
# # TODO
# # 1. Get the current docker version  register docker_version
# # 2. Remove excludes when current docker_version not in search('docker_ver')
# #

- name: Create /etc/systemd/system/docker.service.d
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: 0755

- name: Install docker systemd override
  copy:
    src: override.conf
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: 0644

- name: systemd daemon-reload
  systemd:
    daemon_reload: true

- name: Install docker-ce and supporting utils
  yum:
    name:
      - containerd.io
      # - "docker-compose-{{docker.compose}}"
      - "docker-ce-{{docker.version}}"
      - "docker-ce-cli-{{docker.version}}"
    enablerepo: docker-ce-stable
    state: present

- name: docker-ce version currently installed
  shell:
     rpm -q --last docker-ce | awk -F "-" 'NR==1{sub(/docker-ce/, ""); print $2}'
  ignore_errors: true
  args:
    warn: false
  register: curr_package_ver

- name: service | {{ item }}
  service:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items:
    - [ 'docker' ]
  tags: service

- name: Create [ {/apps,/etc}/docker ]
  file:
    dest: "{{ item.dst }}"
    mode: "{{ item.mode }}"
    state: directory
    owner: root
    group: "{{ item.group}}"
  with_items:
    - { dst: /etc/docker, group: 'docker', mode: '0700', state: directory }
    - { dst: /apps/docker, group: 'docker', mode: '0711', state: directory }

- name: Determine is node is runing in swarm mode
  shell:
    docker info
  ignore_errors: true
  args:
    warn: false
  register: dockerInfo
  tags: dockerInfo


- name: Tune swarm [kernel] Settings
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  with_items:
    - { name: 'net.core.somaxconn', value: 2048 }
  when: "dockerInfo.stdout.find('Swarm: inactive') == -1"
  tags: sysctlSwarm

- name: template | {{ item }}
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: "{{ item.group }}"
  with_items:
    - { src: 'daemon-swarm.json.j2', dest: '/etc/docker/daemon.json', owner: 'root', group: 'docker', mode: '0644' }
  when: "dockerInfo.stdout.find('Swarm: inactive') == -1"
  register: daemonSwarmConfig
  tags: dockerdSwarmJson_config

- name: template | {{ item }}
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: "{{ item.group }}"
  with_items:
    - { src: 'daemon.json.j2', dest: '/etc/docker/daemon.json', owner: 'root', group: 'docker', mode: '0644' }
  when: "dockerInfo.stdout.find('Swarm: inactive') != -1"
  register: daemonConfig
  tags: dockerJson_config


- name: template | {{ item }}
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    owner: root
    group: "{{ item.group }}"
  with_items:
    - { src: 'docker.conf.j2', dest: '/etc/rsyslog.d/docker.conf', owner: 'root', group: 'docker', mode: '0644' }
  tags: dockerdRsyslog_config

- debug:
    msg: " {{ daemonConfig.changed }}"

- name: service | {{ item }}
  service:
    name: "{{ item }}"
    enabled: true
    state: restarted
  with_items:
    - [ 'docker' ]
  when: ( daemonConfig.changed or daemonSwarmConfig.changed or curr_package_ver.stdout != docker.version )
  tags: service

- name: Copy docker config files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items:
    - { src: 'dockerclean.cron', dest: '/etc/cron.d/dockerclean', owner: 'root', group: 'root', mode: '0644' }

- name: Copy log management config files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0444
  with_items:
    - { src: 'docker-log-rotate', dest: '/etc/logrotate.d/docker-log-rotate' }
    - { src: 'docker-log-rotate-applogs', dest: '/etc/cron.d/docker-log-rotate-applogs' }
  tags: dockerLogrotate

- name: Restart rsyslog
  service: >
    name=rsyslog
    enabled=true
    state=restarted

- name: Check for excludes
  command: grep -q ^exclude\= /etc/yum.conf
  register: check_for_excludes
  ignore_errors: true
  changed_when: false
  failed_when: check_for_excludes.rc > 4

- name: Set up initial excludes
  lineinfile: >
        dest=/etc/yum.conf
        state=present
        regexp='^exclude='
        line='exclude=docker*'
  when: check_for_excludes.rc != 0

- name: Check for docker exclude
  command: grep -q docker /etc/yum.conf
  register: check_for_docker
  ignore_errors: true
  changed_when: false
  failed_when: check_for_docker.rc > 4

- name: Exclude docker in yum
  lineinfile: >
        dest=/etc/yum.conf
        backrefs=True
        state=present
        regexp='(^exclude=(.*)$)'
        line='\1 docker*'
  when: check_for_docker.rc != 0

  notify:
    service restart docker
...
