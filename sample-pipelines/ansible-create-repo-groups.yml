---
- hosts: localhost

  vars:
    gitlabciUrl: "https://{{ ansible_fqdn }}:443"
    gitlabAccessToken: "JWFaYj_wrsqkvNU9obFx"


  tasks:

     - name: Create Personal Access Token
       shell: |
         gitlab-rails runner "token = User.find_by_username('root').personal_access_tokens.create(scopes: \
         [:api, :write_repository, :sudo], name: 'root'); token.set_token('{{ gitlabAccessToken }}'); token.save!"
       ignore_errors: yes
       args:
         warn:
           true

     # - name: Create GitLab Group
     #   shell: |
     #     curl -k -v --cacert /etc/gitlab/ssl/ca.crt --cert /etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.crt \
     #       --key /etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.key \
     #       --request POST --header "PRIVATE-TOKEN: {{ gitlabAccessToken }}" \
     #       --header "Content-Type: application/json" \
     #       --data '{ "name": "terraform", "path": "terragrunt", "description": "IaC  management Repo" }' \
     #       "https://usctvltstgitlbci01v.curbstone.com:443/api/v4/groups" | jq '.id'
     #   ignore_errors: true
     #   args:
     #    warn: false


     - name: Create GitLab Group
       uri:
         url: "{{ gitlabciUrl }}/api/v4/groups"
         validate_certs: no
         client_key: '/etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.key'
         client_cert: '/etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.crt'
         method: POST
         headers:
           PRIVATE_TOKEN: '{{ gitlabAccessToken }}'
           Content-Type: "application/json"
         body: "{{ lookup('file','./terraform.json') }}"
         # body: { "name": "terragrunt", "path": "terragrunt", "description": "DevOps management Repo" }
         body_format: json
         # status_code: 204
         # force_basic_auth: yes
         # return_content: yes
       # register: createGitlabGrp

     - debug:
         msg: "{{ createGitlabGrp }}"
