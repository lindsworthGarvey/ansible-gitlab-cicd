---
- hosts: localhost

  vars:
    gitlabciUrl: "http://{{ ansible_fqdn }}:80"
    # gitlabAccessToken: "{{ lookup('password', '/dev/null length=20')}}"


  tasks:

     - set_fact:
         gitlabAccessToken: "{{ lookup('password', '/dev/null length=20')}}"

     - debug:
         msg: "{{ gitlabAccessToken }}"

     - name: Create Personal Access Token
       shell: |
         gitlab-rails runner "token = User.find_by_username('root').personal_access_tokens.create(scopes: \
         [:api, :write_repository, :sudo], name: 'root'); token.set_token('{{ gitlabAccessToken }}'); token.save!"
       ignore_errors: yes
       args:
         warn:
           true
       register: gitlabCItoken

     - name: Disable WebUI SignIn
       shell: |
         curl -v --request POST --header "PRIVATE-TOKEN: {{ gitlabAccessToken }}" \
           "http://localhost:80/api/v4/application/settings?signin_enabled=false&default_project_visibility=internal"
       ignore_errors: true
       args:
         warn: false

    # https://docs.gitlab.com/ce/api/settings.html
    # curl --header "Private-Token: F6VpXgvo3Qbfx4XE4Ya7" -X PUT http://localhost:80/api/v4/application/settings?signin_enabled=false

     - debug:
         msg: "{{ gitlabCItoken }} ==> {{ gitlabAccessToken }}"

     - name: Create GitLab Group
       shell: |
         curl -v --request POST --header "PRIVATE-TOKEN: {{ gitlabAccessToken }}" \
           --header "Content-Type: application/json" \
           --data '{{ item }}' \
           "http://localhost:80/api/v4/groups" | jq '.id'
       ignore_errors: true
       args:
        warn: false
       with_items:
         - { "name": "terraform", "path": "terragrunt", "description": "IaC  management Repo" }
         - { "name": "devops", "path": "devops", "description": "DevOps management Repo" }

     - debug:
         msg: "Verifying the token is the same ==> {{ gitlabAccessToken }}"

     # - name: Create GitLab Group
     #   shell: |
     #     curl -k -v --cacert /etc/gitlab/ssl/ca.crt --cert /etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.crt \
     #       --key /etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.key \
     #       --request POST --header "PRIVATE-TOKEN: {{ gitlabAccessToken }}" \
     #       --header "Content-Type: application/json" \
     #      #--data '{{ lookup('file','./terragrunt.json') }}' \
     #       --data '{ "name": "terraform", "path": "terragrunt", "description": "IaC  management Repo" }' \
     #       "https://usctvltstgitlbci01v.curbstone.com:443/api/v4/groups" | jq '.id'
     #   ignore_errors: true
     #   args:
     #    warn: false


     # - name: Create GitLab Group
     #   uri:
     #     url: "{{ gitlabciUrl }}/api/v4/groups"
     #     # validate_certs: no
     #     # client_key: '/etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.key'
     #     # client_cert: '/etc/gitlab/ssl/usctvltstgitlbci01v.curbstone.com.crt'
     #     method: POST
     #     headers:
     #       PRIVATE_TOKEN: '{{ gitlabAccessToken }}'
     #       Content-Type: "application/json"
     #     # body: "{{ lookup('file','./terraform.json') }}"
     #     body: { "name": "terragrunt", "path": "terragrunt", "description": "DevOps management Repo" }
     #     body_format: json
     #     # status_code: 204
     #     # force_basic_auth: yes
     #     # return_content: yes
     #   # register: createGitlabGrp
     #
     # - debug:
     #     msg: "{{ createGitlabGrp }}"

     - name: Revoke Personal Access Token
       shell: |
         gitlab-rails runner "PersonalAccessToken.find_by_token('{{ gitlabAccessToken }}').revoke!"
       ignore_errors: yes
       args:
         warn:
           true
